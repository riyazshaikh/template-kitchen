{@|apply selector-listener.block}
<script>
(function(){
	var collectionType = "{collection.typeName}" + (Static.SQUARESPACE_CONTEXT.item ? '-item': '');
	var RECIPES = {@|apply recipes.block};
	
	window.RecipeManager = {
		recipe: {},
		singles: [],
		add: function(obj) {
			var parts;
			if(obj) for(var selector in obj) {
				parts = selector.split(':1');
				// identify single instance selector
				if (parts.length == 2 || selector.indexOf(' ') === -1) {
					selector = parts[0];
					this.singles.push(selector);
				}
				this.recipe[selector] = this.recipe[selector] || [];
				Array.prototype.push.apply(this.recipe[selector], Array.isArray(obj[selector]) ? obj[selector] : [obj[selector]]);
			}	
		},
		attach: function(event) {
			console.log('RecipeManager adding ingredient', event.target, this.recipe[event.selector]);

			var values = this.recipe[event.selector];
			if (values) values.forEach(function(val) {
				var parts = val.split('='); // indicates an attribute
				if (parts.length == 2) event.target.setAttribute('data-'+parts[0],parts[1]);
				else event.target.classList.add(val); // else class
			});

			// stop listening if this is a single instance
			if (this.singles.indexOf(event.selector)) {
				delete this.recipe[event.selector];
				return false; // stop listening to selector
			}

			// else keep going
	    event.target.style.visibility = 'visible';
			return true; 
		},
		listen: function() { 
			for(var selector in this.recipe) {
				document.addSelectorListener(selector, this.attach.bind(this));	
			}
		},
		force: function() {
			for(var selector in this.recipe) {
				var els = document.querySelectorAll(selector);
				for (var i=0; i<els.length; i++) {
					if (this.attach({ selector: selector, target: els[i] }) === false)
						break;
				}
			}
		}
	};

	// Start with base tweaks as recipe
	var tweaks = Static.SQUARESPACE_CONTEXT.tweakJSON, parts, key, selector, value;
	for (key in tweaks) {
		parts = key.split('---'); // attribute marker
		if (parts.length == 2 && tweaks[key] !== "") { // only process if there is something to be set
			// convert tweak name into selector, with class path if present, marked for single instance only
			selector = '#' + parts[0].replace(/--/g,' .') + ':1'; 
			// make attribute from tweak attribute and value
			value = parts[1]+'='+tweaks[key].toLowerCase().replace(/\s/g,"-");
			var obj = {};
			obj[selector] = value;
		  RecipeManager.add(obj);
		}
	}

	// Merge template and collection specific recipe
	var recipe = RECIPES[window.location.search.split('recipe=')[1] || window.RECIPE_NAME];
	if (recipe) {
		RecipeManager.add(recipe['main']);
		RecipeManager.add(recipe[collectionType]);
	} 

	// Merge custom recipe (if any)
	RecipeManager.add(window.RECIPE_CUSTOM);

	RecipeManager.listen();

	// to handle edge case where selector-listener has not loaded selectors before domready
	document.addEventListener("DOMContentLoaded", function(event) {
		RecipeManager.force();

		// also make links goto correct recipe (if applicable)
		var recipeName = window.location.search.split('recipe=')[1];
		if (recipeName) {
			var nodes = document.querySelectorAll('a[href^="/"]')
			for(var i=0; i<nodes.length; i++) {
				nodes[i].setAttribute('href', nodes[i].getAttribute('href') + '?recipe=' + recipeName);
			}
		}
	});

	// dynamically inject font awesome if needed
	document.onSelector('.fa', function(event) {
		var link = document.createElement('link');
		link.setAttribute('rel', 'stylesheet');
		link.setAttribute('href', '//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css');
		document.getElementsByTagName('head')[0].appendChild(link);
	});

})();
</script>