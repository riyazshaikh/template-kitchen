{@|apply js-utils.block}
<script>
var SquareMart = window.SquareMart || {};

SquareMart.RecipeManager = {
	recipe: {},

	layout: "{collection.regionName}",
	collection: "{collection.typeName}",
	// item: Static.SQUARESPACE_CONTEXT.item,

	_add: function(target, properties, condition) {
		if (condition) { // predict condition

			condition = false;
		}	

		var selector = condition || target;
		if (!this.recipe[selector]) {
			this.recipe[selector] = [];
			document.addSelectorListener(selector, this.attach.bind(this));	
		}

		if (condition) {
			this.recipe[condition].push({ target: target, properties: properties });
		} else {
			Array.prototype.push.apply(this.recipe[target], properties);
		}
	},

	add: function() {
		if (Array.isArray(arguments[0])) {
			arr.forEach(function() {
				this._add(arguments[0].target, arguments[0].properties, arguments[0].condition);
			}, this);
		} else if (typeof arguments[0] === 'object') {
			this._add(arguments[0].target, arguments[0].properties, arguments[0].condition);
		} else if (arguments.length > 1) {
			this._add(arguments[0], arguments[1], arguments[2]);
		}
	},


	attach: function(event) {
		var selector = event.selector;
		var el = event.target;

		if (!this.recipe[selector]) return false; // nothing to do

		console.log('RecipeManager adding ingredient', this.recipe[selector], el);

		this.recipe[selector] = this.recipe[selector].filter(function(val, i) {
			if (typeof val === 'object') { // add conditional targets to recipe
				this.add(val);
				return false;
			} else {
				var parts = val.split('=');
				if (parts[0].indexOf('data') === 0) el.setAttribute(parts[0], parts[1]);
				else if (parts[0].indexOf('class') === 0) el.classList.add(parts[0].replace('class-','') + '-' + parts[1]);

				return true;
			}
		}, this);

		// stop listening if this is not marked to be continuous
		if (selector.charAt(selector.length-1) !== ' ') {
			delete this.recipe[selector];
			return false; // stop listening to selector
		}

		// else keep going
    el.style.visibility = 'visible';
		return true; 
	},
	// to handle edge case where selector-listener has not loaded selectors before domready
	force: function() { // force detection of loaded selectors
		console.log('forcing recipe');
		for(var selector in this.recipe) {
			var els = document.querySelectorAll(selector);
			for (var i=0; i<els.length; i++) {
				if (this.attach({ selector: selector, target: els[i] }) === false) {
					document.removeSelectorListener(selector, this.attach.bind(this));
				}
			}
		}
	}
};


// dynamically inject font awesome if needed
document.onSelector('.fa', function(event) {
	var link = document.createElement('link');
	link.setAttribute('rel', 'stylesheet');
	link.setAttribute('href', '//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css');
	document.getElementsByTagName('head')[0].appendChild(link);
});

</script>