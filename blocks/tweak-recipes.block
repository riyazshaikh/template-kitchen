{@|apply selector-listener.block}
<script>
(function(){
	
	var collectionType = "{collection.typeName}" + (Static.SQUARESPACE_CONTEXT.item ? '-item': '');
	var mergeRecipe = function(obj) {
		if(obj) for(var name in obj) {
			Static.SQUARESPACE_CONTEXT.tweakJSON[name.replace(/\s/g,'-').toLowerCase()] = obj[name];
		}
	};

	// Merge default recipe for this template
	window.RECIPE_NAME = window.RECIPE_NAME || window.location.search.split('recipe=')[1];
	if (window.RECIPE_NAME && window.RECIPES[RECIPE_NAME]) {
		mergeRecipe(window.RECIPES[RECIPE_NAME]['main']);
		mergeRecipe(window.RECIPES[RECIPE_NAME][collectionType]);
	} 

	// Merge custom recipes if any defined for this collection instance
	if (window.RECIPE_CUSTOM) {
		mergeRecipe(window.RECIPE_CUSTOM);
	}

	// Attach recipe to dom
	var tweaks = Static.SQUARESPACE_CONTEXT.tweakJSON, parts, key, value, selector, attr, tweakMap = {};
	for (key in tweaks) {
		parts = key.split('---'); // attribute marker
		
		if ( parts.length == 2 ) { // only process if attribute to be set

			if (tweaks[key] !== "") { // skip empty tweak values

				if (parts[0].charAt(0) == '#') { // allow explicit selectors
					selector = parts[0];
				} else {
					selector = '#' + parts[0].replace(/--/g,' .'); // convert double space into class selector
				}
				attr = parts[1]; 
				value = tweaks[key];

				// single instance if no class selector
				if (typeof(value) === 'string' && selector.indexOf(' .') === -1) value = [value]; 

			  tweakMap[selector] = tweakMap[selector] || {};
			  tweakMap[selector][attr] = value;
			}
		}
	}

	var setTweakAttr = function(event) {
		var dataset = tweakMap[event.selector];
		if (!dataset) return false; // nothing to do

		console.log('adding tweaks', event.target, dataset);
		for (var attr in dataset) {
			var value = Array.isArray(dataset[attr]) ? dataset[attr].shift() : dataset[attr];
			event.target.setAttribute('data-'+attr, value.toLowerCase().replace(/\s/g,"-"));

			if (Array.isArray(dataset[attr]) && dataset[attr].length === 0) 
				delete dataset[attr];
		}

		if (Object.keys(dataset).length === 0) {
			delete tweakMap[event.selector];
			return false; // stop listening to selector
		}

		// keep going
    event.target.style.visibility = 'visible';
		return true; 
	};

	for(var selector in tweakMap) {
		/** Set tweak attributes on element selector as available **/
		document.addSelectorListener(selector, setTweakAttr);	
	}
				
	// to handle edge case where selector-listener has not loaded selectors before domready
	document.addEventListener("DOMContentLoaded", function(event) {
		for(var selector in tweakMap) {
			var els = document.querySelectorAll(selector);
			for (var i=0; i<els.length; i++) {
				console.log('adding ondomready', els[i], tweakMap[selector]);
				if (setTweakAttr({ selector: selector, target: els[i] }) === false)
					break;
			}
		}

		// also make links goto correct recipe (if applicable)
		var recipe = window.location.search.split('recipe=')[1];
		if (recipe) {
			var nodes = document.querySelectorAll('a[href^="/"]')
			for(var i=0; i<nodes.length; i++) {
				nodes[i].setAttribute('href', nodes[i].getAttribute('href') + '?recipe=' + recipe);
			}
		}
	});

	// dynamically inject font awesome if needed
	document.onSelector('.fa', function(event) {
		var link = document.createElement('link');
		link.setAttribute('rel', 'stylesheet');
		link.setAttribute('href', '//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css');
		document.getElementsByTagName('head')[0].appendChild(link);
	});

})();
</script>