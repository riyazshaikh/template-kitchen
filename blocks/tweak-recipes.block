{@|apply selector-listener.block}
<script>
(function(){
	
	var collectionType = "{collection.typeName}" + (Static.SQUARESPACE_CONTEXT.item ? '-item': '');
	var mergeRecipe = function(obj) {
		if(obj) for(var name in obj) {
			Static.SQUARESPACE_CONTEXT.tweakJSON[name.replace(/\s/g,'-').toLowerCase()] = obj[name];
		}
	};

	// Merge default recipe for this template
	window.RECIPE_NAME = window.RECIPE_NAME || window.location.search.split('recipe=')[1];
	if (window.RECIPE_NAME && window.RECIPES[RECIPE_NAME]) {
		mergeRecipe(window.RECIPES[RECIPE_NAME]['main']);
		mergeRecipe(window.RECIPES[RECIPE_NAME][collectionType]);
	} 

	// Merge custom recipes if any defined for this collection instance
	if (window.RECIPE_CUSTOM) {
		mergeRecipe(window.RECIPE_CUSTOM);
	}

	// Attach recipe to dom
	var tweaks = Static.SQUARESPACE_CONTEXT.tweakJSON, parts, key, value, selector, attr, tweakMap = {};
	for (key in tweaks) {
		parts = key.split('---'); // attribute marker
		
		if ( parts.length > 1 ) { // only for tweaks intended to be set as attributes

			if (tweaks[key] !== "") { // skip empty tweak values

				if (parts[0].charAt(0) == '#') { // allow explicit selectors
					selector = parts[0];
				} else {
					selector = '#' + parts[0].replace(/--/g,' .'); // convert double space into class selector
				}
				attr = parts[1]; 
				value = tweaks[key].toLowerCase().replace(/\s/g,"-");

			  tweakMap[selector] = tweakMap[selector] || {};
			  tweakMap[selector][attr] = value;
			}
		}
	}

	for(var selector in tweakMap) {
		/** Set tweak attributes on element selector as available **/
		document.addSelectorListener(selector, function(dataset, event) {
			for (var attr in dataset) {
				event.target.setAttribute('data-'+attr, dataset[attr]);
			}
	    event.target.style.visibility = 'visible';
			console.log('added tweaks', event.target, dataset);
	  }.bind(this, tweakMap[selector]));	
	}
				
	// to handle edge case where selector-listener has not loaded selectors before domready
	document.addEventListener("DOMContentLoaded", function(event) {
		for(var selector in tweakMap) {
			var el = document.querySelector(selector);
			if (!el) continue;

			var dataset = tweakMap[selector];
			for (var attr in dataset) {
				el.setAttribute('data-'+attr, dataset[attr]);
			}
			el.style.visibility = 'visible';
			console.log('domready added tweaks', el, dataset);
		}

		// also make links goto correct recipe (if applicable)
		var recipe = window.location.search.split('recipe=')[1];
		if (recipe) {
			var nodes = document.querySelectorAll('a[href^="/"]')
			for(var i=0; i<nodes.length; i++) {
				nodes[i].setAttribute('href', nodes[i].getAttribute('href') + '?recipe=' + recipe);
			}
		}
	});

	// dynamically inject font awesome if needed
	document.onSelector('.fa', function(event) {
		var link = document.createElement('link');
		link.setAttribute('rel', 'stylesheet');
		link.setAttribute('href', '//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css');
		document.getElementsByTagName('head')[0].appendChild(link);
	});

})();
</script>