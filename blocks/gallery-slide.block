<div class="gallery-slide">
  <div class="gallery-container" data-intrinsic=half>
    <div class="gallery-aspect-ratio">    
      <div class="sqs-gallery sqs-gallery-design-stacked">
      {.repeated section items}        
          <div class="slide content-fill" data-type="image" data-slide-id="{id}">
            {.main-image?}
            <img {@|image-meta color-data} class="loading" data-load="false" />
            {.end}

            
            {.if title || body}
            <div class="slide-meta" data-layout-width=meta>
              <div class="meta-inside">
                <div class="meta-title" data-appearance=heading1>{title}</p>              
                <div class="meta-description">{body}</div>
              </div>
            </div>
            {.end}
          </div>
      {.end}    
      </div>
      <div class="sqs-gallery-controls show-hover-effect">
        <a href="#" class="previous"></a>
        <a href="#" class="next"></a>
      </div>
    </div>
  </div>
</div>

<script>
(function(){

  var parent = document.currentScript.parentNode;

  Y.use('squarespace-gallery-ng', function (Y) {
    
    window.Galleries = window.Galleries || {}; // to store references;

    window.Galleries[parent.id] = Singleton.create({

      ready: function() {
        this.parentEl = Y.one(parent);
        this.init();
        this.bindUI();
      },

      bindUI: function() {
        this.resizeHandler = new ResizeSensor(Y.one('#site')._node, Y.bind(this.gallery.refresh,this.gallery));
      },

      init: function() {
        this.gallery = new Y.Squarespace.Gallery2({       
            container: this.parentEl.one('.sqs-gallery'),
            slides: this.parentEl.all('.slide'),
            elements: {
              next: this.parentEl.one('.sqs-gallery-controls .next'),
              previous: this.parentEl.one('.sqs-gallery-controls .previous')
            },
            loaderOptions: {
              load: true
            },
            design: 'stacked',
            designOptions: {
              autoHeight: false,
              transition: 'scroll'
            },
            refreshOnResize: true
        });   
      },

      destroy: function() {
        this.gallery.destroy();
      },

    });
  });
})();
</script>