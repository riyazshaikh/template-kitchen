
<script>
!function(){var e={},t={},o="undefined"!=typeof HTMLDocument?HTMLDocument.prototype:Document.prototype,n="undefined"!=typeof HTMLElement?HTMLElement.prototype:Element.prototype,r=document.createElement("style"),i=document.createElement("style"),c=document.getElementsByTagName("head")[0],s=["animationstart","oAnimationStart","MSAnimationStart","webkitAnimationStart"],a=function(t){t.selector=(e[t.animationName]||{}).selector;var o=[];((this.selectorListeners||{})[t.animationName]||[]).forEach(function(e){e.call(this,t)===!1&&o.push(e)},this),o.forEach(function(e){this.removeSelectorListener(t.selector,e)},this)},l=function(){var e="animation-duration: 0.001s;",t="animation-name: SelectorListener !important;",o="visibility:hidden;",n=window.getComputedStyle(document.documentElement,""),r=(Array.prototype.slice.call(n).join("").match(/moz|webkit|ms/)||""===n.OLink&&["o"])[0];return{css:"-"+r+"-",properties:"{"+o+e+t+"-"+r+"-"+e+"-"+r+"-"+t+"}",keyframes:!(!window.CSSKeyframesRule&&!window["WebKit|Moz|MS|O".match(new RegExp("("+r+")","i"))[1]+"CSSKeyframesRule"])}}();r.type=i.type="text/css",c.appendChild(r),c.appendChild(i),o.addSelectorListener=n.addSelectorListener=function(o,n){var c=t[o],m=this.selectorListeners=this.selectorListeners||{};if(c)e[c].count++;else{c=t[o]="SelectorListener-"+Math.random().toString(16).substr(2,9);var u=document.createTextNode("@"+(l.keyframes?l.css:"")+"keyframes "+c+" {from { outline-color: #fff; } to { outline-color: #000; }}");i.appendChild(u);var d=document.createTextNode(o+l.properties.replace(/SelectorListener/g,c));r.appendChild(d),e[c]={count:1,selector:o,keyframe:u,rule:d}}m.count?m.count++:(m.count=1,s.forEach(function(e){this.addEventListener(e,a,!1)},this)),(m[c]=m[c]||[]).push(n)},o.removeSelectorListener=n.removeSelectorListener=function(o,n){var c=this.selectorListeners||{},l=t[o],m=c[l]||[],u=m.indexOf(n);if(u>-1){var d=e[t[o]];d.count--,d.count||(r.removeChild(d.rule),i.removeChild(d.keyframe),delete e[l],delete t[o]),c.count--,m.splice(u,1),c.count||s.forEach(function(e){this.removeEventListener(e,a,!1)},this)}},HTMLDocument.prototype.onSelector=HTMLElement.prototype.onSelector=function(e,t){this.addSelectorListener(e,function(e){return t(e),!1})}}();
</script>

<script>
window.SquareMart = {};

SquareMart.Utils = {
	currentScript: function() {
		return document.currentScript || (function() {
      var scripts = document.getElementsByTagName('script');
      return scripts[scripts.length - 1];
    })();
	}
}; 

SquareMart.RecipeManager = {
	recipe: {},

	_add: function(target, properties, condition) {
		if (condition) { 
			if (condition === target) { // condition on target is redundant
				condition = null;
			}
		}	

		var selector = condition || target;
		if (!this.recipe[selector]) {
			this.recipe[selector] = [];
			document.addSelectorListener(selector, this.attach.bind(this));	
		}

		if (condition) {
			this.recipe[condition].push({ target: target, properties: properties });
		} else {
			properties = Array.isArray(properties) ? properties : [properties];
			Array.prototype.push.apply(this.recipe[target], properties);
		}
	},

	add: function(data) {
		try {
			if (Array.isArray(data)) {
				this._add(data[0], data[1], data[2]);
			} else if (typeof data === 'object') {
				this._add(data.target, data.properties, data.condition);
			} else if (typeof data === 'string' && arguments.length > 1) {
				this._add(data, arguments[1], arguments[2]);
			}
		} catch(e) {
			console.error('problem adding recipe', data, e);
		}
	},


	attach: function(event) {
		var selector = event.selector;
		var el = event.target;

		if (!this.recipe[selector]) return false; // nothing to do

		this.recipe[selector] = this.recipe[selector].filter(function(val, i) {
			if (typeof val === 'object') { // move conditional targets to top level

				console.log('moving condition');
				this.add(val);
				return false;

			} else if (typeof val === 'function') {

				val.call(event.target, event);
				return true;

			} else {
				console.log('Adding ingredient', val, el);

				var parts = val.split('=');
				if (parts[0].indexOf('data') === 0) {

					if (parts[1]) el.setAttribute(parts[0], parts[1]);
					else el.removeAttribute(parts[0]);

				} else if (parts[0].indexOf('class') === 0) {

					var className = parts[0].replace('class-','');
					if (parts[1] === "true") el.classList.add(className);
					else el.classList.remove(className);

				}

				return true;
			}
		}, this);

		// stop listening if this is not marked to be continuous
		if (selector.charAt(selector.length-1) !== ' ') {
			delete this.recipe[selector];
			return false; // stop listening to selector
		}

		// else keep going
    el.style.visibility = 'visible';
		return true; 
	},
	// to handle edge case where selector-listener has not loaded selectors before domready
	force: function() { // force detection of loaded selectors
		console.log('forcing recipe');
		for(var selector in this.recipe) {
			var els = document.querySelectorAll(selector);
			for (var i=0; i<els.length; i++) {
				if (this.attach({ selector: selector, target: els[i] }) === false) {
					document.removeSelectorListener(selector, this.attach.bind(this));
				}
			}
		}
	}
};


// dynamically inject font awesome if needed
document.onSelector('.fa', function(event) {
	var link = document.createElement('link');
	link.setAttribute('rel', 'stylesheet');
	link.setAttribute('href', '//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css');
	document.getElementsByTagName('head')[0].appendChild(link);
});
</script>

<script>
(function(){
  var requestFrame = window.requestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    function(fn){ return window.setTimeout(fn, 20); };
  
  function debounceResize(e){
    var win = e.target || e.srcElement;
    if (!win.__resizeRAF__) {
      win.__resizeRAF__ = requestFrame(function(){
        var trigger = win.__resizeTrigger__;
        trigger.__resizeListeners__.forEach(function(fn){
          fn.call(trigger, e);
        });
        win.__resizeRAF__ = null;
        console.log('end resize', win.innerWidth, win.innerHeight);
      });
    };
  }
  
  function objectLoad(e){
    this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__;
    this.contentDocument.defaultView.addEventListener('resize', debounceResize);
  }
  
  window.addResizeListener = function(element, fn){
    if (typeof SquareMart.bFrameRequired === 'undefined') {
      SquareMart.bFrameRequired = false;
      // (function() {
      //     var obj, value = false, site = document.querySelector('body');
      //     try {
      //       obj = document.createElement('object'); 
      //       obj.type = 'text/html'; 
      //       obj.data = 'about:blank'; 
      //       site.appendChild(obj); 
      //       obj.contentDocument.head = obj.contentDocument.head;
      //     } catch(e) {
      //        value = true;
      //     }
      //     site.removeChild(obj); 
      //     return value;
      //   })();      
    }

    if (!element.__resizeListeners__) {
      element.__resizeListeners__ = [];
      element.setAttribute('data-resize','');

      var obj;
      if (SquareMart.bFrameRequired) {
        obj = document.createElement('iframe');
        obj.src = 'about:blank';
      } else {
        obj = document.createElement('object');
        obj.type = 'text/html';
        obj.data = 'about:blank';
      }
      obj.__resizeElement__ = element;
      element.__resizeTrigger__ = obj;
      obj.onload = objectLoad;
      element.appendChild(obj);
    }
    element.__resizeListeners__.push(fn);
  };
  
  window.removeResizeListener = function(element, fn){
    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
    if (!element.__resizeListeners__.length) {
      element.__resizeTrigger__.contentDocument.defaultView.removeEventListener('resize', resizeListener);
      element.__resizeTrigger__ = !element.removeChild(element.__resizeTrigger__);
      element.removeAttribute('data-resize');
    }
  }

  // SquareMart.RecipeManager.add("[data-resize] > iframe, [data-resize] > object ", objectLoad);

})();
</script>

<script>
(function(){
  var queryRegExp = /query\((.+?(?=\)\s*query|\)$))/ig;
  var mediaRule = ' @media {rule} { [query-id="{id}"] { opacity: 1; } }';
  var baseRule = 'html, body { margin: 0; padding: 0 } div { -webkit-transition: opacity 0.01s; -ms-transition: opacity 0.01s; -o-transition: opacity 0.01s; transition: opacity 0.01s; opacity: 0; }';
  
  function attachObject(box){
    var obj;
    if (SquareMart.bFrameRequired) {
      obj = document.createElement('iframe');
      obj.src = 'about:blank';
    } else {
      obj = document.createElement('object');
      obj.type = 'text/html';
      obj.data = 'about:blank';
    }
    obj.__querybox__ = box;
    obj.onload = objectLoad;
    box.appendChild(obj);
    return obj;
  }
  
  function objectLoad(e){
    var box = this.__querybox__;
    var doc = box.__eq__.doc = this.contentDocument;
    doc.__querybox__ = box;
    setStyle(doc, baseRule);
    doc.addEventListener('transitionend', debounceMatching);
    doc.addEventListener('MSTransitionEnd', debounceMatching);
    doc.addEventListener('webkitTransitionEnd', debounceMatching);
    parseQueries(box);
    box.__eq__.loaded = true;
  }
  
  var requestFrame = window.requestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    function(fn){ return window.setTimeout(fn, 20); };
  
  function debounceMatching(){
    var doc = this;
    if (!doc.__matching__) {
      doc.__matching__ = requestFrame(function(){
        getMatches(doc);
        doc.__matching__ = null;
      });
    };
  }
  
  function setStyle(doc, rules){
    var style = doc.createElement('style');
    style.innerHTML = rules;
    if (doc.head.firstChild) doc.head.removeChild(doc.head.firstChild);
    doc.head.appendChild(style);
  }
  
  function parseQueries(box){
    var media = box.getAttribute('data-media');
    if (media != null) {
      var rules = baseRule;
      var nodes = '';
      var matches = media.match(queryRegExp);
      box.setAttribute('matched-media', '');
      if (matches != null) matches.forEach(function(match){
        var values = match.replace('query(', '').split(',');
        var id = values.shift();
        nodes += '<div query-id="' + id + '"></div>';
        rules += mediaRule.replace('{rule}', values.join(',').trim()).replace('{id}', id);
      });
      var doc = box.__eq__.doc;
      setStyle(doc, rules);
      doc.body.innerHTML = nodes;
      getMatches(doc);
    }
  }
  
  function getMatches(doc){
    var matches = [];
    var box = doc.__querybox__;
    var nodes = doc.body.children;
    var index = nodes.length;
    while (index--) {
      // if you don't use the <object> defaultView's getComputedStyle, Firefox evaluates the query incorrectly
      if (doc.defaultView.getComputedStyle(nodes[index]).opacity == '1') {
        matches.push(nodes[index].getAttribute('query-id'));
      }
    }
    box.setAttribute('matched-media', matches.join(' '));
  }
  
  window.attachQuerySensor = function(box){
    if (!box.__eq__) {
      box.__eq__ = {};
      box.__eq__.object = attachObject(box);
    }
  };
  
  window.detachQuerySensor = function(box){
    if (box.__eq__) {
      box.removeChild(box.__eq__.object);
      delete box.__eq__;
    }
  };
  
  var setAttr = Element.prototype.setAttribute;
  Element.prototype.setAttribute = function(name){
    setAttr.apply(this, arguments);
    if (name == 'data-media') {
      if (this.__eq__) parseQueries(this);
      else attachQuerySensor(this);
    }
  }

  function initialize(){
    var nodes = document.body.querySelectorAll('body [data-media]:not(style)');
    var index = nodes.length;
    while (index--) attachQuerySensor(nodes[index]);
  }
  
  if (document.readyState == 'complete') initialize();
  else document.addEventListener('DOMContentLoaded', initialize);

  // SquareMart.RecipeManager.add("[data-media] > iframe, [data-media] > object ", objectLoad);
})();
</script>

<script>
// Rafscroll By Kevin Foley. Under WTFPL - http://www.wtfpl.net/txt/copying/
!function(){function i(i,t){return i?"function"!=typeof i?void console.warn("rafScroll: Invalid callback type."):(this._scrolling=!1,this._callback=i,this._args=t||[],void this.subscribe()):void console.warn("rafScroll: No callback supplied, not initiating.")}function t(i){this._mostRecentScrollEvent=i,this._scrolling===!1&&(this._scrolling=!0,o.call(this)),this._scrollTimeout&&clearTimeout(this._scrollTimeout);var t=this;this._scrollTimeout=setTimeout(function(){t._scrolling=!1},s)}function o(){this._args.unshift(this._mostRecentScrollEvent),this._callback.apply(window||{},this._args),this._args.shift(),this._scrolling===!0&&requestAnimationFrame(o.bind(this))}if(!window.requestAnimationFrame)return void console.info("Your browser does not support requestAnimationFrame. There is a nice polyfill you can use here.","https://gist.github.com/paulirish/1579671");var s=100;i.prototype={subscribe:function(){addEventListener("scroll",t.bind(this),!1)},unsubscribe:function(){removeEventListener("scroll",t.bind(this),!1)}},"function"==typeof define&&define.amd?define("rafscroll",i):"undefined"!=typeof module&&"undefined"!=typeof exports?module.exports={rafscroll:i}:window.rafscroll=i}();
</script>

<script>
// check for old browsers - https://browser-update.org/
function $buo_f(){var e=document.createElement("script");e.src="//browser-update.org/update.min.js",document.body.appendChild(e)}var $buoop={vs:{i:10,f:35,o:25,s:7},c:2};try{document.addEventListener("DOMContentLoaded",$buo_f,!1)}catch(e){window.attachEvent("onload",$buo_f)}
</script>

